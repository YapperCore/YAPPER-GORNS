# Web App Hosting & CI/CD Documentation

## 1. Overview

This document compares different hosting and CI/CD options for a web application with a React frontend, a Flask backend, and Firebase for storage. It also explains why Vercel (frontend), Google Cloud Run (backend), and Bitbucket Pipelines (CI/CD) were chosen.

## 2. Web App Architecture

- **Frontend**: React application hosted on Vercel.
- **Backend**: Python Flask API deployed on Google Cloud Run.
- **File Storage & Database**: Firebase Storage and Firestore.
- **CI/CD**: Bitbucket Pipelines automating deployments.

## 3. Comparison of Hosting Options

### Frontend Hosting

| Hosting Provider | Pros                                   | Cons                          |
|-------------------|---------------------------------------|-------------------------------|
| **Vercel**        | Free tier, easy CI/CD, global CDN, auto-scaling | Limited backend support       |
| **Netlify**       | Similar to Vercel, great for static sites | Less optimized for serverless functions |
| **AWS S3 + CloudFront** | Low-cost, scalable               | Requires manual deployment setup |

✅ **Chosen**: **Vercel** – Simple deployment, built-in CI/CD, excellent performance for React.

### Backend Hosting

| Hosting Provider       | Pros                                   | Cons                          |
|-------------------------|---------------------------------------|-------------------------------|
| **Google Cloud Run**    | Serverless, auto-scaling, pay-per-use | Cold starts possible          |
| **AWS Elastic Beanstalk** | Managed, integrates with AWS         | More expensive for small projects |
| **Render**              | Easy setup, good free tier            | Limited scaling options       |
| **Heroku**              | Simple, developer-friendly            | Free tier limited; paid starts at $5/month |

✅ **Chosen**: **Google Cloud Run** – Cost-effective, integrates well with Firebase, scales efficiently.

### CI/CD Tools

| CI/CD Tool             | Pros                                   | Cons                          |
|-------------------------|---------------------------------------|-------------------------------|
| **Bitbucket Pipelines** | Built into Bitbucket, easy YAML-based config | Requires Bitbucket repo       |
| **GitHub Actions**      | Free 2,000 min/month, strong integrations | Can be complex to configure   |
| **GitLab CI/CD**        | Free 400 min/month, strong automation | More complex setup            |

✅ **Chosen**: **Bitbucket Pipelines** – Since the code is in Bitbucket, it provides seamless integration.

## 4. Why This Setup?

- ✅ **Vercel for Frontend**: Fast, free, auto-deploys React apps.
- ✅ **Cloud Run for Backend**: Scales automatically, cost-efficient, works well with Firebase.
- ✅ **Bitbucket Pipelines for CI/CD**: Integrated with Bitbucket for easy automated deployments.

## 5. Deployment Workflow

### Frontend Deployment (Vercel):
- Push to the main branch → Auto-deployed by Vercel.

### Backend Deployment (Cloud Run + Bitbucket Pipelines):
- Push to Bitbucket → Pipeline triggers build & deploy to Cloud Run.

## 6. Conclusion

This setup ensures cost efficiency, scalability, and automation while keeping deployment simple. Future improvements may include Kubernetes for high-scale backend needs and Firebase Authentication for secure user access.

