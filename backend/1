// frontend/src/components/TrashBucket/TrashBucket.js
import React, { useState, useEffect, useRef } from 'react';
import './TrashBucket.css';
import '../../static/Home.css';
import { Restore, PermDel } from '../../util/confirmable';
import 'primereact/resources/themes/saga-blue/theme.css';
import 'primereact/resources/primereact.min.css';
import { Toast } from 'primereact/toast';
import { ConfirmPopup } from 'primereact/confirmpopup';
import { useAuth } from '../../context/AuthContext';

const TrashBucket = () => {
  const [trashFiles, setTrashFiles] = useState([]);
  const toast = useRef(null);
  const { currentUser } = useAuth();

  useEffect(() => {
    fetchTrashFiles();
  }, []);

  const fetchTrashFiles = async () => {
    try {
      // Get authentication token
      const idToken = await currentUser.getIdToken();
      
      const res = await fetch('/trash-files', {
        headers: {
          'Authorization': `Bearer ${idToken}`,
          'X-User-ID': currentUser.uid
        }
      });
      
      if (res.ok) {
        const data = await res.json();
        setTrashFiles(data.files || []);
      } else {
        const errorData = await res.json();
        toast.current.show({ 
          severity: 'error', 
          summary: 'Error', 
          detail: errorData.error || 'Failed to fetch trash files' 
        });
      }
    } catch (err) {
      console.error("Error fetching trash files:", err);
      toast.current.show({ 
        severity: 'error', 
        summary: 'Error', 
        detail: 'Failed to fetch trash files' 
      });
    }
  };

  const handleRestore = async (filename) => {
    try {
      // Get authentication token
      const idToken = await currentUser.getIdToken();
      
      const res = await fetch(`/restore_file/${filename}`, { 
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${idToken}`,
          'X-User-ID': currentUser.uid
        }
      });
      
      if (res.ok) {
        setTrashFiles((prev) => prev.filter((f) => f !== filename));
        toast.current.show({ 
          severity: 'success', 
          summary: 'Success', 
          detail: 'File restored successfully' 
        });
      } else {
        const data = await res.json();
        toast.current.show({ 
          severity: 'error', 
          summary: 'Error', 
          detail: data.error || 'Error restoring file' 
        });
      }
    } catch (err) {
      console.error("Error restoring file:", err);
      toast.current.show({ 
        severity: 'error', 
        summary: 'Error', 
        detail: 'Error restoring file' 
      });
    }
  };

  const handlePermDelete = async (filename) => {
    try {
      // Get authentication token
      const idToken = await currentUser.getIdToken();
      
      const res = await fetch(`/delete_file/${filename}`, { 
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${idToken}`,
          'X-User-ID': currentUser.uid
        }
      });
      
      if (res.ok) {
        setTrashFiles((prev) => prev.filter((f) => f !== filename));
        toast.current.show({ 
          severity: 'success', 
          summary: 'Success', 
          detail: 'File permanently deleted' 
        });
      } else {
        const data = await res.json();
        toast.current.show({ 
          severity: 'error', 
          summary: 'Error', 
          detail: data.error || 'Error deleting file' 
        });
      }
    } catch (err) {
      console.error("Error deleting file:", err);
      toast.current.show({ 
        severity: 'error', 
        summary: 'Error', 
        detail: 'Error deleting file' 
      });
    }
  };

  return (
    <div className="TrashBucket-container">
      <Toast ref={toast} position="top-right" />
      <ConfirmPopup />
      <h2>Trash Bucket</h2>
      <div className="docs-grid">
        {trashFiles.length > 0 ? trashFiles.map((file, i) => (
          <div key={i} className="doc-card">
            <h4 className="doc-title">Trashed file</h4> 
            <p className="audio-info">{file}</p>
            <div className="doc-actions">
              <Restore onRestore={() => handleRestore(file)} toast={toast} />
              <PermDel onDelete={() => handlePermDelete(file)} toast={toast} />
            </div>
          </div>
        )) : (
          <p>Your trash is empty.</p>
        )}
      </div>
    </div>
  );
};

export default TrashBucket;
