import os
import uuid
import json
import logging
from flask import request, jsonify  # type: ignore
from config import UPLOAD_FOLDER, TRASH_FOLDER
from services.storage import save_doc_store, doc_store
from auth import verify_firebase_token, is_admin

logger = logging.getLogger(__name__)

@verify_firebase_token
def list_docs():
    """Return only non-deleted documents for the authenticated user."""
    if not doc_store:
        return jsonify([]), 200
    active_docs = [
        d for d in doc_store.values() 
        if not d.get("deleted", False) and (d.get("owner") == request.uid or is_admin(request.uid))
    ]
    return jsonify(active_docs), 200

@verify_firebase_token
def get_doc(doc_id):
    """Retrieve a specific document by ID for the authenticated user."""
    d = doc_store.get(doc_id)
    if not d or d.get("deleted") or (d.get("owner") != request.uid and not is_admin(request.uid)):
        return jsonify({"error": "Doc not found"}), 404
    return jsonify(d), 200

@verify_firebase_token
def create_doc():
    """Create a new document with ownership information."""
    data = request.json or {}
    doc_id = str(uuid.uuid4())
    name = data.get("name", f"Doc{len(doc_store) + 1}")
    content = data.get("content", "")

    doc_obj = {
        "id": doc_id,
        "name": name,
        "content": content,
        "audioFilename": None,
        "originalFilename": None,
        "audioTrashed": False,
        "deleted": False,
        "owner": request.uid
    }

    doc_store[doc_id] = doc_obj
    save_doc_store()
    return jsonify(doc_obj), 201

@verify_firebase_token
def update_doc(doc_id):
    """Update an existing document."""
    data = request.json or {}
    doc = doc_store.get(doc_id)
    if not doc or doc.get("deleted") or (doc.get("owner") != request.uid and not is_admin(request.uid)):
        return jsonify({"error": "Doc not found"}), 404

    doc["name"] = data.get("name", doc.get("name"))
    doc["content"] = data.get("content", doc.get("content"))

    save_doc_store()
    return jsonify(doc), 200
@verify_firebase_token
def delete_doc(doc_id):
    """Soft delete a document and (if applicable) move its file to trash."""
    d = doc_store.get(doc_id)
    if not d or d.get("deleted") or (d.get("owner") != request.uid and not is_admin(request.uid)):
        return jsonify({"message": "Doc not found"}), 404
